Day 17 :- 

Leet code problems

arrays
1.229
2.15
3.56
4.88


binary search 
1.4
2.875
3.162
4.1011

sliding window
1.1358
2.424


Leet Code 875 :-
Koko Eating Bananas :-


Koko has several piles of bananas.
Each pile has a certain number of bananas (given in an array).
Koko can choose a speed k â€” the number of bananas she eats per hour.

Every hour:
She chooses one pile (any one).
She eats up to k bananas from it.
If the pile has less than k bananas, she eats the whole pile and rests the remaining time.

The goal is:
Find the minimum value of k such that Koko finishes all bananas in at most h hours.
 
Code :-

public class KokoEatingBananas {

    public int minEatingSpeed(int[] piles, int h) {
        int left = 1;
        int right = getMax(piles);
        int result = right;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int totalHours = getTotalHours(piles, mid);

            if (totalHours <= h) {
                result = mid;
                right = mid - 1; // Try a smaller k
            } else {
                left = mid + 1; // Need a larger k
            }
        }

        return result;
    }

    // Helper function to get the maximum pile size
    private int getMax(int[] piles) {
        int max = 0;
        for (int pile : piles) {
            if (pile > max) {
                max = pile;
            }
        }
        return max;
    }

    // Helper function to calculate total hours needed at a certain speed
    private int getTotalHours(int[] piles, int k) {
        int hours = 0;
        for (int pile : piles) {
            hours += (pile + k - 1) / k; // Same as Math.ceil(pile / k)
        }
        return hours;
    }

    // Example usage
    public static void main(String[] args) {
        KokoEatingBananas koko = new KokoEatingBananas();

        System.out.println(koko.minEatingSpeed(new int[]{3, 6, 7, 11}, 8));       // Output: 4
        System.out.println(koko.minEatingSpeed(new int[]{30, 11, 23, 4, 20}, 5)); // Output: 30
        System.out.println(koko.minEatingSpeed(new int[]{30, 11, 23, 4, 20}, 6)); // Output: 23
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Leet code :- 1358

logic ;-

class Solution {
    public int numberOfSubstrings(String s) {
        int count = 0;
        int left = 0;
        int[] charCount = new int[3];

        for (int right = 0; right < s.length(); right++) {
            charCount[s.charAt(right) - 'a']++;

            while (charCount[0] > 0 && charCount[1] > 0 && charCount[2] > 0) {
                count += s.length() - right;
                charCount[s.charAt(left) - 'a']--;
                left++;
            }
        }

        return count;

    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------

MAXIMUM product of Subarray : 
[5,3,2,-1,0,5,7,8,0,-1,2]

OBSERVATION : In a given subarray , if we have even negative values ,product will be positive  ;
                                    if we have odd negative values , the product will be negative 
                                    if we find zero , the product will be zero , then we have to make it 1 ; reinitiaize the product from 1 .
                                    Initialize two variables ,prefix and suffix variables 
                                    Calculate prefix product , calculate suffix product , get max of Prefix and suffix , we will get overall max .
                                    Whenever the product becomes zero , it means 


OBJECT ORIENTED PROGRAMMIng : 

pre requirement : 
Class , Object , Constuctor ,Interface . 

class - Blueprint of Object . IT is a virtual entity .
--------------------------------------------------------------------------------------------------------------------------------------------------------


Object  - Instance of Class to call non static method which were present in that particular class we have to create object for that particular class . 
          If it is a static method , u can directly call using class . 

Constructor - Two types : default constructor and parameterised contructor . used to initialize the object .

Default constructor  : for every class there will be default constructor and for every class there will be parameter .
                       Constructor is neither class nor methods , its having the class name and method properties .

----------------------------------------------------------------------------------------------------------------------------------------------------------
Inheritance : 
SIngle inheritance , Multiple inheritance , multilevel , hybrid .

single inheritance :
properties are inherited to child class from parent class .

Multilevel Inheritance : 
Properties are inherited to parent class from grandparent class and again properties inherited to child class from parent class .

Multiple Inheritance : 
So properties are inherited to child class from multiple parents . 

hierarchy : properties are inherited to multiple childs .

Extend keyword is used to inherit properties from classes . 

Implement keyword is used to inherit properties from interfaces .
------------------------------------------------------------------------------------------------------------------------------------------------------------

POLYMORPHISM : 
Same method existing multiple times in different forms . 

METHOD OVERLOADING - same method name existing in same class with different parameters .
METHOD OVERRIDING  - Method declared in child class and the same method existing in parent class as same name and same parameters .

Main method can be overriden .

----------------------------------------------------------------------------------------------------------------------------------------------------------------

Encapsulation - Binding method and data and hiding sensative data .

If variable declared as private variable in class , if you want to access the variable outside the class , we cant access , if we want to access using methods we can 
access

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

ABSTRACTION : 

Sliding implementation showing extension later .
if a method is a abstract method , the method name should start with abstract keyword as well as the class name should be start with abstract keyword .

There are 4 types of abstraction : 
1.Data abstraction
2.Functioal abstraction
3. Control abstraction
4. Procedure abstraction 

Abstract methods are incomplete methods .
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

INTERFACE : 
Interface contains only abstract methods . we cant create object for interface . 

Access Modifiers : 
Public , Private , Protected and Default .

Public - if a variable , method or class declared as a public . The scope will be within the class , within the file , within the package , outside the package , 
         Parent class of outside the package , Outside the package child class .
Private - if a variable , method or class declared as private , The scope will be within the class only 

Protected - If a variable or method or class declared as a protected , the scope will be within the class , within the file , within the package , outside the package 
            child class only . dont have scope for Outside the package parent class .

Default - The scope will be within the class , within the file , within the package only .















































