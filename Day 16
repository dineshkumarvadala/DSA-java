Day 16 :-

Finding the target value in a unsorted array using binary search
int arr[] = [6,5,1,2,3,4] and target is 5.

Code :- 


public class Main {

    public static int search(int[] nums, int target) {
        int low = 0, high = nums.length - 1;

        while (low <= high) {
            int mid = (low + high) / 2;

            
            if (nums[mid] == target) {
                return mid;
            }

            
            if (nums[low] <= nums[mid]) {
                if (nums[low] <= target && target < nums[mid]) {
                    high = mid - 1;  
                } else {
                    low = mid + 1;   
                }
            }
           
            else {
                if (nums[mid] < target && target <= nums[high]) {
                    low = mid + 1;   
                } else {
                    high = mid - 1;  
                }
            }
        }

        return -1; 
    }
public static void main(String[] args) {
        int[] arr = {6, 5, 1, 2, 3, 4};
        int target = 3;
        int result = search(arr, target);

        if (result != -1)
            System.out.println("Element found at index: " + result);
        else
            System.out.println("Element not found.");
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------

Leet Code 1752 :-

class Solution {
    public boolean check(int[] nums) {
     int count = 0, n = nums.length;
        for (int i = 0; i < n; i++) 
            if (nums[i] > nums[(i+1) % n] && ++count > 1) return false;
        return count <= 1;
    }
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------

Leet Code 930 :- 

class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        return atMost(nums, goal) - atMost(nums, goal - 1);
    }
    private int atMost(int[] nums, int goal) {
        int head, tail = 0, sum = 0, result = 0;
        for (head = 0; head < nums.length; head++) {
            sum += nums[head];
            while (sum > goal && tail <= head) {
                sum -= nums[tail];
                tail++;
            }
            result += head - tail + 1;
        }
        return result;



    }
}

--------------------------------------------------------------------------------------------------------------------------------------------





